# Task ID: 3
# Title: Create Layout Components and Navigation
# Status: done
# Dependencies: 1
# Priority: medium
# Description: Develop the core layout components including header, navigation, and responsive container structure that will be used across the application.
# Details:
1. Create base layout components:
   - MainLayout (container with header, content area, footer)
   - Header (with family name, user switcher)
   - Sidebar (navigation for different sections)
   - UserSwitcher (component to change between family members)
   - PIN entry dialog for parent authentication

2. Implement responsive design using Tailwind:
   - Mobile-first approach with breakpoints
   - Card-based layout as specified in PRD
   - Consistent spacing and visual hierarchy

3. Set up navigation with React Router:
```typescript
const router = createBrowserRouter([
  {
    path: '/',
    element: <MainLayout />,
    children: [
      { index: true, element: <Dashboard /> },
      { path: 'tasks', element: <TasksPage /> },
      { path: 'rewards', element: <RewardsPage /> },
      { path: 'admin', element: <ProtectedRoute><AdminPage /></ProtectedRoute> }
    ]
  }
]);
```

4. Create ProtectedRoute component for parent-only areas
5. Implement color-coded status indicators as specified in PRD
6. Create consistent card component for family members
7. Implement user context to track current active user

# Test Strategy:
1. Test responsive layout across different screen sizes
2. Verify navigation works correctly between all routes
3. Test protected routes with and without PIN authentication
4. Verify user switching functionality
5. Test keyboard navigation accessibility
6. Verify color contrast meets WCAG 2.1 AA standards
7. Test screen reader compatibility

# Subtasks:
## 1. Create Base Layout Components [done]
### Dependencies: None
### Description: Develop the foundational layout components that will structure the application UI
### Details:
Implement the following components using React and Tailwind CSS:
1. MainLayout: Create a container component with slots for header, sidebar, content area, and footer
2. Header: Implement with family name display and placeholder for user switcher
3. Sidebar: Build navigation panel with links to different sections
4. Footer: Simple footer with copyright information
Ensure components use Tailwind for styling with a mobile-first approach and proper responsive breakpoints.

## 2. Implement User Switcher and PIN Authentication [done]
### Dependencies: 3.1
### Description: Create components for switching between family members and PIN-based authentication for parent access
### Details:
1. Develop UserSwitcher component that displays family member avatars and names
2. Create PIN entry dialog component with numeric keypad
3. Implement state management for current active user
4. Add visual indicators for selected user
5. Connect PIN verification to a placeholder authentication function (to be replaced with actual auth later)
Use React context to manage and provide the current user state throughout the application.

## 3. Set Up React Router Navigation Structure [done]
### Dependencies: 3.1
### Description: Configure routing for the application with proper nesting and route protection
### Details:
1. Install and configure React Router
2. Set up the router configuration as specified in the task description
3. Create placeholder page components for Dashboard, TasksPage, RewardsPage, and AdminPage
4. Implement the ProtectedRoute component that checks for parent authentication before rendering protected routes
5. Add navigation links in the Sidebar component that connect to the router

## 4. Create Card Components with Status Indicators [done]
### Dependencies: 3.2
### Description: Develop reusable card components with color-coded status indicators for family members and items
### Details:
1. Create a base Card component with consistent styling
2. Implement FamilyMemberCard component that displays user information
3. Add color-coded status indicators as specified in the PRD
4. Ensure cards are responsive and maintain proper layout at all breakpoints
5. Implement hover and active states for interactive cards

## 5. Implement User Context and Connect Components [done]
### Dependencies: 3.2, 3.3, 3.4
### Description: Create a global user context and connect all components to create a cohesive navigation experience
### Details:
1. Create UserContext with provider component to track current active user
2. Implement useUser hook for easy context consumption
3. Connect UserSwitcher to update the context
4. Update Header to display current user information
5. Connect ProtectedRoute to check user role from context
6. Ensure all components respond appropriately to user changes
7. Add final styling adjustments for visual consistency

